// Game variables
let canvas, ctx;
let player, balls = [];
let score = 0, lives = 3, level = 1;
let highScore = localStorage.getItem('highScore') || 0;
let gameRunning = false;
let animationId;
let ballSpawnRate = 2000; // milliseconds
let lastBallSpawn = 0;
let touchStartX = 0;

// DOM elements
const scoreElement = document.getElementById('score');
const livesElement = document.getElementById('lives');
const levelElement = document.getElementById('level');
const highScoreElements = document.querySelectorAll('#highScore');
const startScreen = document.getElementById('startScreen');
const gameOverScreen = document.getElementById('gameOverScreen');
const finalScoreElement = document.getElementById('finalScore');
const finalLevelElement = document.getElementById('finalLevel');
const startButton = document.getElementById('startButton');
const restartButton = document.getElementById('restartButton');

// Initialize the game
function init() {
    canvas = document.getElementById('gameCanvas');
    ctx = canvas.getContext('2d');
    
    // Set canvas dimensions to match its display size
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);
    
    // Initialize player
    const playerWidth = canvas.width * 0.15;
    const playerHeight = playerWidth * 0.4;
    player = {
        x: canvas.width / 2 - playerWidth / 2,
        y: canvas.height - playerHeight - 10,
        width: playerWidth,
        height: playerHeight,
        speed: 8,
        color: '#FF5733'
    };
    
    // Update high score display
    updateHighScore();
    
    // Event listeners
    startButton.addEventListener('click', startGame);
    restartButton.addEventListener('click', startGame);
    
    // Keyboard controls
    window.addEventListener('keydown', handleKeyDown);
    
    // Mouse controls
    canvas.addEventListener('mousemove', handleMouseMove);
    
    // Touch controls for mobile
    canvas.addEventListener('touchstart', handleTouchStart);
    canvas.addEventListener('touchmove', handleTouchMove);
}

// Resize canvas to match its display size
function resizeCanvas() {
    const displayWidth = canvas.clientWidth;
    const displayHeight = canvas.clientHeight;
    
    if (canvas.width !== displayWidth || canvas.height !== displayHeight) {
        canvas.width = displayWidth;
        canvas.height = displayHeight;
    }
}

// Start the game
function startGame() {
    score = 0;
    lives = 3;
    level = 1;
    balls = [];
    ballSpawnRate = 2000;
    
    updateScore();
    updateLives();
    updateLevel();
    
    startScreen.classList.add('hidden');
    gameOverScreen.classList.add('hidden');
    
    gameRunning = true;
    lastBallSpawn = Date.now();
    
    // Start the game loop
    if (animationId) {
        cancelAnimationFrame(animationId);
    }
    gameLoop();
}

// Game loop
function gameLoop() {
    // Clear the canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // Draw player
    drawPlayer();
    
    // Spawn new balls
    const currentTime = Date.now();
    if (currentTime - lastBallSpawn > ballSpawnRate) {
        spawnBall();
        lastBallSpawn = currentTime;
    }
    
    // Update and draw balls
    updateBalls();
    
    // Check for level up
    checkLevelUp();
    
    if (gameRunning) {
        animationId = requestAnimationFrame(gameLoop);
    }
}

// Draw the player
function drawPlayer() {
    ctx.fillStyle = player.color;
    ctx.fillRect(player.x, player.y, player.width, player.height);
}

// Spawn a new ball
function spawnBall() {
    const minSize = canvas.width * 0.03;
    const maxSize = canvas.width * 0.08;
    const size = Math.random() * (maxSize - minSize) + minSize;
    
    const ball = {
        x: Math.random() * (canvas.width - size),
        y: -size,
        size: size,
        speed: 2 + Math.random() * 2 + (level - 1) * 0.5,
        color: getRandomColor()
    };
    
    balls.push(ball);
}

// Update and draw all balls
function updateBalls() {
    for (let i = balls.length - 1; i >= 0; i--) {
        const ball = balls[i];
        
        // Move the ball
        ball.y += ball.speed;
        
        // Draw the ball
        ctx.fillStyle = ball.color;
        ctx.beginPath();
        ctx.arc(ball.x + ball.size / 2, ball.y + ball.size / 2, ball.size / 2, 0, Math.PI * 2);
        ctx.fill();
        
        // Check for collision with player
        if (
            ball.y + ball.size > player.y &&
            ball.y < player.y + player.height &&
            ball.x + ball.size > player.x &&
            ball.x < player.x + player.width
        ) {
            // Ball caught
            balls.splice(i, 1);
            score += 10;
            updateScore();
        }
        // Check if ball is out of bounds
        else if (ball.y > canvas.height) {
            // Ball missed
            balls.splice(i, 1);
            lives--;
            updateLives();
            
            if (lives <= 0) {
                gameOver();
            }
        }
    }
}

// Handle keyboard input
function handleKeyDown(e) {
    if (!gameRunning) return;
    
    if (e.key === 'ArrowLeft') {
        player.x = Math.max(0, player.x - player.speed);
    } else if (e.key === 'ArrowRight') {
        player.x = Math.min(canvas.width - player.width, player.x + player.speed);
    }
}

// Handle mouse movement
function handleMouseMove(e) {
    if (!gameRunning) return;
    
    const rect = canvas.getBoundingClientRect();
    const mouseX = e.clientX - rect.left;
    
    // Center the player on the mouse position
    player.x = Math.max(0, Math.min(canvas.width - player.width, mouseX - player.width / 2));
}

// Handle touch start
function handleTouchStart(e) {
    if (!gameRunning) return;
    e.preventDefault();
    
    const rect = canvas.getBoundingClientRect();
    touchStartX = e.touches[0].clientX - rect.left;
}

// Handle touch movement
function handleTouchMove(e) {
    if (!gameRunning) return;
    e.preventDefault();
    
    const rect = canvas.getBoundingClientRect();
    const touchX = e.touches[0].clientX - rect.left;
    
    // Center the player on the touch position
    player.x = Math.max(0, Math.min(canvas.width - player.width, touchX - player.width / 2));
}

// Check for level up
function checkLevelUp() {
    const scoreThreshold = level * 100;
    
    if (score >= scoreThreshold) {
        level++;
        updateLevel();
        
        // Increase difficulty
        ballSpawnRate = Math.max(500, ballSpawnRate - 200);
    }
}

// Update score display
function updateScore() {
    scoreElement.textContent = score;
}

// Update lives display
function updateLives() {
    livesElement.textContent = lives;
}

// Update level display
function updateLevel() {
    levelElement.textContent = level;
}

// Update high score
function updateHighScore() {
    highScoreElements.forEach(element => {
        element.textContent = highScore;
    });
}

// Game over
function gameOver() {
    gameRunning = false;
    
    // Update high score if needed
    if (score > highScore) {
        highScore = score;
        localStorage.setItem('highScore', highScore);
        updateHighScore();
    }
    
    // Show game over screen
    finalScoreElement.textContent = score;
    finalLevelElement.textContent = level;
    gameOverScreen.classList.remove('hidden');
}

// Get a random color
function getRandomColor() {
    const colors = ['#FF5733', '#33FF57', '#3357FF', '#F3FF33', '#FF33F3', '#33FFF3'];
    return colors[Math.floor(Math.random() * colors.length)];
}

// Initialize the game when the page loads
window.addEventListener('load', init);
